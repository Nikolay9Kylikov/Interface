module spi_master(
    input clk,         // Тактовый сигнал
    input rst,         // Сброс
    input start,       // Старт чтения
    input [7:0] cmd,   // Команда на отправку (05h для чтения статусного регистра)
    input miso,        // Вход данных от флешки
    output reg mosi,   // Выход данных к флешке
    output reg sclk,   // Тактирование SPI
    output reg cs,     // Сигнал выбора чипа
    output reg [7:0] data_out = 8'b0, // Прочитанные данные из флешки
    output reg done,    // Флаг завершения операции
    output [3:0] test_bit_cnt,
    output [7:0] test_shift_reg,
    output [1:0] test_state
);
    
    reg [3:0] bit_cnt = 4'b0; // Счётчик битов
    reg [7:0] shift_reg = 8'b0; // Сдвиговый регистр для отправки/получения данных
    reg [1:0] state = 2'b0;
    
    assign test_bit_cnt = bit_cnt;
    assign test_shift_reg = shift_reg;
    assign test_state = state;
    
    localparam IDLE = 2'b00,
               SEND_CMD = 2'b01,
               READ_DATA = 2'b10,
               DONE = 2'b11;

    always @(posedge clk or posedge rst) begin
        if (rst) begin
            cs <= 1;    // запись в микросхему
            sclk <= 0;
            done <= 0;
            state <= IDLE;
            bit_cnt <= 0;
        end else begin
            case (state)
                IDLE: begin
                    cs <= 1;  // Поднимаем CS(считываем из микросхемы)
                    if (start) begin
                        shift_reg <= cmd;
                        bit_cnt <= 7;
                        cs <= 0;  // Опускаем CS для начала обмена
                        state <= SEND_CMD; // <= 2'b01
                    end
                end

                SEND_CMD: begin
                    sclk <= ~sclk;  // Генерация тактовых импульсов
                    if (!sclk) begin
                        mosi <= shift_reg[7];  // Отправляем старший бит
                        shift_reg <= {shift_reg[6:0], 1'b0};  // Сдвиг данных
                        if (bit_cnt == 0) 
                        begin
                            state <= READ_DATA;  // Переходим на чтение данных
                            shift_reg <= 8'h00;  // Очистка сдвигового регистра для приёма
                            //data_out[0] <= miso;
                        end 
                        else 
                        begin
                            bit_cnt <= bit_cnt - 1;
                            data_out[bit_cnt] <= miso;
                        end
                    end
                end

                READ_DATA: begin
                    sclk <= ~sclk;  // Тактовый сигнал
                    if (sclk) begin
                        shift_reg <= {shift_reg[6:0], miso};  // Чтение данных
                        if (bit_cnt == 0) 
                        begin
                            data_out <= shift_reg;
                            state <= DONE;  // Завершение
                        end 
                        else 
                        begin
                            bit_cnt <= bit_cnt - 1;
                        end
                    end
                end

                DONE: begin
                    cs <= 1;  // Поднимаем CS
                    done <= 1;  // Флаг завершения
                    state <= IDLE;
                end
            endcase
            end
    end
endmodule
